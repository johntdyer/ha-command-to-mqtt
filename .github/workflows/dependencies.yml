name: Dependency Updates

on:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  # Update Go dependencies
  update-go-deps:
    name: Update Go Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Update Go dependencies
      run: |
        go get -u all
        go mod tidy
        go mod verify

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet go.mod go.sum; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Go dependencies'
        title: 'chore: update Go dependencies'
        body: |
          ## Automated Go Dependency Update
          
          This PR updates Go dependencies to their latest versions.
          
          ### Changes
          - Updated all Go module dependencies
          - Ran `go mod tidy` to clean up
          - Verified module checksums
          
          ### Testing
          - [ ] All tests pass
          - [ ] Application builds successfully
          - [ ] No breaking changes detected
          
          **Auto-generated by GitHub Actions**
        branch: deps/update-go-dependencies
        delete-branch: true
        draft: false

  # Update GitHub Actions
  update-actions:
    name: Update GitHub Actions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update GitHub Actions versions
      uses: glassechidna/update-actions-versions@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet .github/; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update GitHub Actions versions'
        title: 'chore: update GitHub Actions versions'
        body: |
          ## Automated GitHub Actions Update
          
          This PR updates GitHub Actions to their latest versions.
          
          ### Changes
          - Updated action versions in workflow files
          - Ensures latest security patches and features
          
          ### Testing
          - [ ] All workflows pass
          - [ ] No breaking changes detected
          
          **Auto-generated by GitHub Actions**
        branch: deps/update-actions-versions
        delete-branch: true
        draft: false

  # Security updates
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Check for vulnerabilities
      id: vuln-check
      run: |
        if govulncheck ./... > vuln-report.txt 2>&1; then
          echo "vulnerabilities=false" >> $GITHUB_OUTPUT
        else
          echo "vulnerabilities=true" >> $GITHUB_OUTPUT
        fi

    - name: Create security issue
      if: steps.vuln-check.outputs.vulnerabilities == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const vulnReport = fs.readFileSync('vuln-report.txt', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Security vulnerabilities detected',
            body: `## Security Vulnerabilities Detected
            
            Automated security scan found vulnerabilities in the codebase.
            
            ### Vulnerability Report
            \`\`\`
            ${vulnReport}
            \`\`\`
            
            ### Action Required
            - [ ] Review the vulnerabilities
            - [ ] Update affected dependencies
            - [ ] Test the fixes
            - [ ] Deploy the updates
            
            **Auto-generated by GitHub Actions Security Scan**`,
            labels: ['security', 'bug', 'priority-high']
          });

  # Check for outdated base images
  check-base-images:
    name: Check Base Images
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Docker base images
      run: |
        echo "Checking Docker base images for updates..."
        
        # Extract base images from Dockerfiles
        BASE_IMAGES=$(grep -h "FROM" docker/Dockerfile addon/Dockerfile | grep -v "AS" | awk '{print $2}' | sort -u)
        
        echo "Found base images:"
        echo "$BASE_IMAGES"
        
        # Check each image for updates (this is a simplified check)
        for image in $BASE_IMAGES; do
          echo "Checking $image for updates..."
          docker pull "$image" || echo "Could not pull $image"
        done

    - name: Create base image update reminder
      uses: actions/github-script@v6
      with:
        script: |
          // Check if there's already an open issue about base image updates
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'dependencies,docker',
            state: 'open'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('base image') || issue.title.includes('Docker')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“¦ Monthly Docker base image update check',
              body: `## Docker Base Image Update Reminder
              
              This is a monthly reminder to check for updates to Docker base images.
              
              ### Images to Check
              - Alpine Linux images
              - Go build images
              - Home Assistant base images
              
              ### Action Items
              - [ ] Check for updated base images
              - [ ] Update Dockerfiles if needed
              - [ ] Test updated images
              - [ ] Update documentation if necessary
              
              **Auto-generated monthly reminder**`,
              labels: ['dependencies', 'docker', 'maintenance']
            });
          }